Traceback (most recent call last):
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/rblack/_dev/nffs-symposium/live-2022/.direnv/python-3.9.9/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
class NBPlot:
    def __init__(self):
        self.plot_pipe, plotter_pipe = mp.Pipe()
        self.plotter = ProcessPlotter()
        self.plot_process = mp.Process(
            target=self.plotter, args=(plotter_pipe,), daemon=True)
        self.plot_process.start()

    def plot(self, finished=False):
        send = self.plot_pipe.send
        if finished:
            send(None)
        else:
            data = np.random.random(2)
            send(data)


def main():
    pl = NBPlot()
    for ii in range(10):
        pl.plot()
        time.sleep(0.5)
    pl.plot(finished=True)


if __name__ == '__main__':
    if plt.get_backend() == "MacOSX":
        mp.set_start_method("forkserver")
    main()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mBrokenPipeError[0m                           Traceback (most recent call last)
[0;32m/var/folders/t9/hc5s57h95tj3rsp4qvk61m8m0000gn/T/ipykernel_44444/2248730681.py[0m in [0;36m<module>[0;34m[0m
[1;32m     27[0m     [0;32mif[0m [0mplt[0m[0;34m.[0m[0mget_backend[0m[0;34m([0m[0;34m)[0m [0;34m==[0m [0;34m"MacOSX"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     28[0m         [0mmp[0m[0;34m.[0m[0mset_start_method[0m[0;34m([0m[0;34m"forkserver"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 29[0;31m     [0mmain[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/var/folders/t9/hc5s57h95tj3rsp4qvk61m8m0000gn/T/ipykernel_44444/2248730681.py[0m in [0;36mmain[0;34m()[0m
[1;32m     19[0m     [0mpl[0m [0;34m=[0m [0mNBPlot[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m     [0;32mfor[0m [0mii[0m [0;32min[0m [0mrange[0m[0;34m([0m[0;36m10[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 21[0;31m         [0mpl[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     22[0m         [0mtime[0m[0;34m.[0m[0msleep[0m[0;34m([0m[0;36m0.5[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     23[0m     [0mpl[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mfinished[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/var/folders/t9/hc5s57h95tj3rsp4qvk61m8m0000gn/T/ipykernel_44444/2248730681.py[0m in [0;36mplot[0;34m(self, finished)[0m
[1;32m     13[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m             [0mdata[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mrandom[0m[0;34m.[0m[0mrandom[0m[0;34m([0m[0;36m2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 15[0;31m             [0msend[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     16[0m [0;34m[0m[0m
[1;32m     17[0m [0;34m[0m[0m

[0;32m/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/connection.py[0m in [0;36msend[0;34m(self, obj)[0m
[1;32m    209[0m         [0mself[0m[0;34m.[0m[0m_check_closed[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    210[0m         [0mself[0m[0;34m.[0m[0m_check_writable[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 211[0;31m         [0mself[0m[0;34m.[0m[0m_send_bytes[0m[0;34m([0m[0m_ForkingPickler[0m[0;34m.[0m[0mdumps[0m[0;34m([0m[0mobj[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    212[0m [0;34m[0m[0m
[1;32m    213[0m     [0;32mdef[0m [0mrecv_bytes[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mmaxlength[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/connection.py[0m in [0;36m_send_bytes[0;34m(self, buf)[0m
[1;32m    414[0m                 [0;31m# Also note we want to avoid sending a 0-length buffer separately,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    415[0m                 [0;31m# to avoid "broken pipe" errors if the other end closed the pipe.[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 416[0;31m                 [0mself[0m[0;34m.[0m[0m_send[0m[0;34m([0m[0mheader[0m [0;34m+[0m [0mbuf[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    417[0m [0;34m[0m[0m
[1;32m    418[0m     [0;32mdef[0m [0m_recv_bytes[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mmaxsize[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/multiprocessing/connection.py[0m in [0;36m_send[0;34m(self, buf, write)[0m
[1;32m    371[0m         [0mremaining[0m [0;34m=[0m [0mlen[0m[0;34m([0m[0mbuf[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    372[0m         [0;32mwhile[0m [0;32mTrue[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 373[0;31m             [0mn[0m [0;34m=[0m [0mwrite[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_handle[0m[0;34m,[0m [0mbuf[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    374[0m             [0mremaining[0m [0;34m-=[0m [0mn[0m[0;34m[0m[0;34m[0m[0m
[1;32m    375[0m             [0;32mif[0m [0mremaining[0m [0;34m==[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mBrokenPipeError[0m: [Errno 32] Broken pipe
BrokenPipeError: [Errno 32] Broken pipe

